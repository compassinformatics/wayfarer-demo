{"version":3,"file":"isochrones-77c2790c.js","sources":["../../src/js/isochronessolver.js","../../src/js/isochrones.js"],"sourcesContent":["import { buffer, boundingExtent } from 'ol/extent.js'\nimport { primaryAction } from 'ol/events/condition.js'\nimport { Draw } from 'ol/interaction.js'\nimport VectorLayer from 'ol/layer/Vector.js'\nimport VectorSource from 'ol/source/Vector.js'\nimport { Fill, Stroke, Style, RegularShape } from 'ol/style.js'\nimport GeoJSON from 'ol/format/GeoJSON.js'\nimport { callService } from './utils.js'\n\nexport function clearIsochrones () {\n    // clear all previous features so only the last drawn feature remains\n    resultsLayer.getSource().clear()\n}\n\nfunction resultsStyle (feature, resolution) {\n    if (feature.getGeometry().getType() === 'Polygon') {\n        const color = feature.get('color')\n\n        return new Style({\n            fill: new Fill({\n                color\n            })\n        })\n    } else {\n        return new Style({\n            image: new RegularShape({\n                fill: new Fill({ color: 'red' }),\n                stroke: new Stroke({ color: 'black', width: 2 }),\n                points: 5,\n                radius: 10,\n                radius2: 4,\n                angle: 0\n            })\n        })\n    }\n};\n\nconst resultsLayer = new VectorLayer({\n    source: new VectorSource(),\n    style: resultsStyle,\n    opacity: 0.3\n})\n\nfunction isFeatureSnapped (map, coord, searchLayer) {\n    let extent = boundingExtent([coord]) // still a single point\n    const bufferDistance = map.getView().getResolution() * 3 // use a 6 pixel tolerance for snapping\n    extent = buffer(extent, bufferDistance) // buffer the point\n\n    const feats = searchLayer.getSource().getFeaturesInExtent(extent)\n\n    if (feats.length > 0) {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunction serviceCallback (data) {\n    // load route from the GeoJSON\n\n    if (Object.keys(data).length !== 0) {\n        resultsLayer.getSource().clear()\n\n        const geojsonFormat = new GeoJSON()\n        const feats = geojsonFormat.readFeatures(data)\n        resultsLayer.getSource().addFeatures(feats)\n    }\n}\n\nfunction getIsochrones (resultsLayer, feature) {\n    const coords = feature.getGeometry().getCoordinates()\n    const jsonData = JSON.stringify({\n        x: coords[0],\n        y: coords[1]\n    })\n\n    callService('isochrones', jsonData, serviceCallback)\n}\n\nexport function createIsochroneTool (map, networkLayer) {\n    map.addLayer(resultsLayer)\n\n    const draw = new Draw({\n        source: resultsLayer.getSource(),\n        type: 'Point',\n        condition: function (evt) {\n            if (primaryAction(evt) === true) {\n                return isFeatureSnapped(map, evt.coordinate, networkLayer)\n            } else {\n                return false\n            }\n        }\n    })\n\n    resultsLayer.getSource().on('addfeature', function (evt) {\n        if (evt.feature.getGeometry().getType() === 'Point') {\n            getIsochrones(resultsLayer, evt.feature)\n        }\n    })\n\n    return draw\n}\n","import '../style.css'\nimport { Map, View } from 'ol'\nimport TileLayer from 'ol/layer/Tile'\nimport XYZ from 'ol/source/XYZ.js'\nimport { Snap } from 'ol/interaction.js'\nimport { transformExtent } from 'ol/proj'\n\nimport 'ol/ol.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport ContextMenu from 'ol-contextmenu'\nimport 'ol-contextmenu/ol-contextmenu.css'\nimport { createIsochroneTool } from './isochronessolver.js'\n\nimport { createNetworkLayer, toggleLabels } from './networklayer.js'\n\nfunction init() {\n    const geojsonFile = './data/stbrice.json'\n    const extent = [2.3314107610246633, 48.988440397479536, 2.4050093789098863, 49.01280894618151]\n    const bbox = transformExtent(extent, 'EPSG:4326', 'EPSG:3857')\n    const background = null// '#1a2b39'  //null\n    const showOSM = true\n\n    const networkLayer = createNetworkLayer(geojsonFile, background)\n\n    const map = new Map({\n        target: 'map',\n        layers: [\n            new TileLayer({\n                source: new XYZ({\n                    url: 'http://stamen-tiles-c.a.ssl.fastly.net/toner/{z}/{x}/{y}.png'\n                })\n            }),\n            networkLayer\n        ],\n        view: new View({\n            center: [-697841.1416552059, 7046686.336793598],\n            extent: bbox, // constrains extent\n            zoom: 16\n        })\n    })\n\n    const contextmenuItems = [\n        {\n            text: 'Hide/Show Labels',\n            callback: toggleLabels\n        },\n        '-'\n    ]\n\n    const contextmenu = new ContextMenu({\n        width: 170,\n        defaultItems: true, // defaultItems are (for now) Zoom In/Zoom Out\n        items: contextmenuItems\n    })\n    map.addControl(contextmenu)\n\n    const isoChroneTool = createIsochroneTool(map, networkLayer)\n    map.addInteraction(isoChroneTool)\n    isoChroneTool.setActive(true)\n\n    const snap = new Snap({\n        source: networkLayer.getSource()\n    })\n\n    // The snap interaction must be added after the Modify and Draw interactions\n    // in order for its map browser event handlers to be fired first. Its handlers\n    // are responsible of doing the snapping.\n    map.addInteraction(snap)\n}\n\ninit()\n"],"names":["resultsStyle","feature","resolution","color","Style","Fill","RegularShape","Stroke","resultsLayer","VectorLayer","VectorSource","isFeatureSnapped","map","coord","searchLayer","extent","boundingExtent","bufferDistance","buffer","serviceCallback","data","feats","GeoJSON","getIsochrones","coords","jsonData","callService","createIsochroneTool","networkLayer","draw","Draw","evt","primaryAction","init","geojsonFile","bbox","transformExtent","createNetworkLayer","Map","TileLayer","XYZ","View","contextmenuItems","toggleLabels","contextmenu","ContextMenu","isoChroneTool","snap","Snap"],"mappings":"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"}