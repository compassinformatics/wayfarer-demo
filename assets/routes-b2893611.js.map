{"version":3,"file":"routes-b2893611.js","sources":["../../src/js/routesolver.js","../../src/js/routes.js"],"sourcesContent":["import { buffer, boundingExtent } from 'ol/extent.js'\nimport { primaryAction } from 'ol/events/condition.js'\nimport { Draw, Select } from 'ol/interaction.js'\nimport VectorLayer from 'ol/layer/Vector.js'\nimport VectorSource from 'ol/source/Vector.js'\nimport { Fill, Stroke, Style, Circle, Text } from 'ol/style.js'\nimport { getNetworkEdits } from './networkeditor.js'\nimport GeoJSON from 'ol/format/GeoJSON.js'\nimport { callService } from './utils.js'\nimport { updateTable } from './table.js'\n\nlet selectInteraction\n\nexport function clearRoutes () {\n    // clear all previous features so only the last drawn feature remains\n    resultsLayer.getSource().clear()\n}\n\nfunction resultsStyle (feature, resolution) {\n    let text\n\n    if (feature.getGeometry().getType() === 'LineString') {\n        text = new Text({\n            // text: feature.get('index').toString(),\n            font: '10px Open Sans',\n            fill: new Fill({ color: '#000' }),\n            stroke: new Stroke({ color: '#fff', width: 3 }),\n            offsetX: 0,\n            offsetY: -12,\n            textAlign: 'center',\n            textBaseline: 'middle'\n        })\n    } else {\n        text = new Text({\n            text: feature.get('index').toString(),\n            font: '14px Open Sans',\n            // fill: new Fill({ color: '#000' }),\n            // stroke: new Stroke({ color: '#000', width: 3 }),\n            offsetX: 0,\n            offsetY: 0,\n            textAlign: 'center',\n            textBaseline: 'middle'\n        })\n    }\n\n    return new Style({\n\n        stroke: new Stroke({\n            color: '#ff1dce',\n            width: 2\n        }),\n\n        text,\n\n        image: new Circle({\n            radius: 12,\n            fill: new Fill({\n                color: '#ff1dce'\n            })\n        })\n    })\n};\n\nconst resultsLayer = new VectorLayer({\n    source: new VectorSource(),\n    style: resultsStyle\n})\n\nfunction clearPreviousFeatures () {\n    // remove any previous edges from the results layer\n\n    resultsLayer.getSource().forEachFeature(function (feature) {\n        if (feature.getGeometry().getType() === 'LineString') {\n            // Remove the feature from the layer\n            resultsLayer.getSource().removeFeature(feature)\n        }\n    })\n}\n\nfunction isFeatureSnapped (map, coord, searchLayer) {\n    let extent = boundingExtent([coord]) // still a single point\n    const bufferDistance = map.getView().getResolution() * 3 // use a 6 pixel tolerance for snapping\n    extent = buffer(extent, bufferDistance) // buffer the point\n\n    const feats = searchLayer.getSource().getFeaturesInExtent(extent)\n\n    if (feats.length > 0) {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunction serviceCallback (data) {\n    // load route from the GeoJSON\n\n    if (Object.keys(data).length !== 0) {\n        clearPreviousFeatures()\n        const geojsonFormat = new GeoJSON()\n        const feats = geojsonFormat.readFeatures(data)\n        resultsLayer.getSource().addFeatures(feats)\n\n        updateTable(feats, selectInteraction, resultsLayer)\n    }\n}\n\nfunction drawEnd (evt, networkLayer, resultsLayer) {\n    const feature = evt.feature\n    const coordinate = feature.getGeometry().getCoordinates()\n    const closestNetworkFeature = networkLayer.getSource().getClosestFeatureToCoordinate(coordinate)\n\n    if (closestNetworkFeature) {\n        const index = getPointFeatures().length\n\n        const edgeId = closestNetworkFeature.getId()\n        feature.set('edgeId', edgeId)\n        feature.set('index', index)\n        return true\n    }\n\n    return false\n}\n\nfunction getPointFeatures () {\n    const pointFeatures = []\n\n    resultsLayer.getSource().forEachFeature(\n\n        function (feature) {\n            if (feature.getGeometry().getType() === 'Point') {\n                pointFeatures.push(feature)\n            }\n        }\n    )\n\n    return pointFeatures\n}\n\nfunction getRoute (resultsLayer) {\n    const pointFeatures = getPointFeatures()\n\n    if (pointFeatures.length >= 2) {\n        const geojsonFormat = new GeoJSON()\n\n        const jsonData = JSON.stringify({\n            points: geojsonFormat.writeFeatures(pointFeatures),\n            edits: getNetworkEdits()\n        })\n\n        callService('solve_shortest_path_from_points', jsonData, serviceCallback)\n    }\n}\n\nexport function createRouteSolver (map, networkLayer) {\n    map.addLayer(resultsLayer)\n\n    const draw = new Draw({\n        source: resultsLayer.getSource(),\n        type: 'Point',\n        condition: function (evt) {\n            if (primaryAction(evt) === true) {\n                return isFeatureSnapped(map, evt.coordinate, networkLayer)\n            } else {\n                return false\n            }\n        }\n    })\n\n    resultsLayer.getSource().on('addfeature', function (evt) {\n        if (evt.feature.getGeometry().getType() === 'Point') {\n            getRoute(resultsLayer)\n        }\n    })\n\n    selectInteraction = new Select({\n        layers: [resultsLayer],\n        style: function (feature, resolution) {\n            return new Style({\n                stroke: new Stroke({\n                    color: '#00ffff',\n                    width: 2\n                })\n            })\n        }\n    })\n    selectInteraction.setActive(false)\n\n    map.addInteraction(selectInteraction)\n\n    draw.on('drawend', function (evt) {\n        drawEnd(evt, networkLayer, resultsLayer)\n    })\n\n    return draw\n}\n","import '../style.css'\nimport { Map, View } from 'ol'\nimport TileLayer from 'ol/layer/Tile'\nimport OSM from 'ol/source/OSM'\nimport { Snap } from 'ol/interaction.js'\nimport { transformExtent } from 'ol/proj'\nimport { getCenter } from 'ol/extent'\n\nimport 'ol/ol.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport ContextMenu from 'ol-contextmenu'\nimport 'ol-contextmenu/ol-contextmenu.css'\n\nimport { createRouteSolver, clearRoutes } from './routesolver.js'\nimport { createNetworkEditor, clearNetworkEdits } from './networkeditor.js'\nimport { createNetworkLayer, toggleLabels } from './networklayer.js'\n\nimport { createTable } from './table.js'\n\nfunction init () {\n    // const geojsonFile = './data/dublin.json'\n    // const bbox = [-700886.9046790214, 7045529.032412218, -695548.0308066505, 7048223.495319679]\n    // const background = '#1a2b39'\n\n    const geojsonFile = './data/stbrice.json'\n    const extent = [2.3314107610246633, 48.988440397479536, 2.4050093789098863, 49.01280894618151]\n    const bbox = transformExtent(extent, 'EPSG:4326', 'EPSG:3857')\n    const background = null\n    const networkLayer = createNetworkLayer(geojsonFile, background, 'rgba(255, 255, 255, 0.0)')\n\n    createTable()\n\n    const map = new Map({\n        target: 'map',\n        layers: [\n            new TileLayer({\n                source: new OSM()\n            }),\n            networkLayer\n        ],\n        view: new View({\n            center: getCenter(bbox),\n            extent: bbox, // constrains extent\n            zoom: 16\n        })\n    })\n\n    function disableTools () {\n        const tools = [routeSolver, networkEditor]\n        tools.forEach(function (tool) {\n            tool.setActive(false)\n        })\n    }\n    const contextmenuItems = [\n        {\n            text: 'Hide/Show Labels',\n            callback: toggleLabels\n        },\n        '-',\n        {\n            text: 'Activate Route Solver',\n            callback: function () {\n                disableTools()\n                routeSolver.setActive(true)\n            }\n        },\n        {\n            text: 'Clear Routes',\n            callback: clearRoutes\n        },\n        '-',\n        {\n            text: 'Activate Network Editor',\n            callback: function () {\n                disableTools()\n                networkEditor.setActive(true)\n            }\n        },\n        {\n            text: 'Clear Network Edits',\n            callback: clearNetworkEdits\n        },\n        '-'\n    ]\n\n    const contextmenu = new ContextMenu({\n        width: 170,\n        defaultItems: true, // defaultItems are (for now) Zoom In/Zoom Out\n        items: contextmenuItems\n    })\n    map.addControl(contextmenu)\n\n    const networkEditor = createNetworkEditor(map, networkLayer)\n    const routeSolver = createRouteSolver(map, networkLayer)\n\n    map.addInteraction(routeSolver)\n    map.addInteraction(networkEditor)\n\n    disableTools()\n    routeSolver.setActive(true)\n\n    const snap = new Snap({\n        source: networkLayer.getSource()\n    })\n\n    // The snap interaction must be added after the Modify and Draw interactions\n    // in order for its map browser event handlers to be fired first. Its handlers\n    // are responsible of doing the snapping.\n    map.addInteraction(snap)\n}\n\ninit()\n"],"names":["selectInteraction","clearRoutes","resultsLayer","resultsStyle","feature","resolution","text","Text","Fill","Stroke","Style","Circle","VectorLayer","VectorSource","clearPreviousFeatures","isFeatureSnapped","map","coord","searchLayer","extent","boundingExtent","bufferDistance","buffer","serviceCallback","data","feats","GeoJSON","updateTable","drawEnd","evt","networkLayer","coordinate","closestNetworkFeature","index","getPointFeatures","edgeId","pointFeatures","getRoute","geojsonFormat","jsonData","getNetworkEdits","callService","createRouteSolver","draw","Draw","primaryAction","Select","init","geojsonFile","bbox","transformExtent","createNetworkLayer","createTable","Map","TileLayer","OSM","View","getCenter","disableTools","routeSolver","networkEditor","tool","contextmenuItems","toggleLabels","clearNetworkEdits","contextmenu","ContextMenu","createNetworkEditor","snap","Snap"],"mappings":"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"}