{"version":3,"file":"rivers-930d6bd3.js","sources":["../../src/js/riversolver.js","../../src/js/rivers.js"],"sourcesContent":["import { buffer, boundingExtent } from 'ol/extent.js'\nimport { primaryAction } from 'ol/events/condition.js'\nimport { Draw, Select } from 'ol/interaction.js'\nimport VectorLayer from 'ol/layer/Vector.js'\nimport VectorSource from 'ol/source/Vector.js'\nimport { Fill, Stroke, Style, Circle } from 'ol/style.js'\nimport GeoJSON from 'ol/format/GeoJSON.js'\nimport { callService } from './utils.js'\nimport { updateTable } from './table.js'\n\nlet selectInteraction\n\nexport function clearRoutes () {\n    // clear all previous features so only the last drawn feature remains\n    resultsLayer.getSource().clear()\n}\n\nfunction resultsStyle (feature, resolution) {\n    return new Style({\n\n        stroke: new Stroke({\n            color: '#ff1dce',\n            width: 2\n        }),\n\n        image: new Circle({\n            radius: 12,\n            fill: new Fill({\n                color: '#ff1dce'\n            })\n        })\n    })\n};\n\nconst resultsLayer = new VectorLayer({\n    source: new VectorSource(),\n    style: resultsStyle\n    // opacity: 0.3\n})\n\nfunction isFeatureSnapped (map, coord, searchLayer) {\n    let extent = boundingExtent([coord]) // still a single point\n    const bufferDistance = map.getView().getResolution() * 3 // use a 6 pixel tolerance for snapping\n    extent = buffer(extent, bufferDistance) // buffer the point\n\n    const feats = searchLayer.getSource().getFeaturesInExtent(extent)\n\n    if (feats.length > 0) {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunction serviceCallback (data) {\n    // load route from the GeoJSON\n\n    if (Object.keys(data).length !== 0) {\n        resultsLayer.getSource().clear()\n\n        const geojsonFormat = new GeoJSON()\n        const feats = geojsonFormat.readFeatures(data)\n        resultsLayer.getSource().addFeatures(feats)\n\n        updateTable(feats, selectInteraction, resultsLayer)\n    }\n}\n\nfunction getDownstream (networkLayer, resultsLayer, feature) {\n    const coords = feature.getGeometry().getCoordinates()\n    const coordinate = feature.getGeometry().getCoordinates()\n    const closestNetworkFeature = networkLayer.getSource().getClosestFeatureToCoordinate(coordinate)\n\n    if (closestNetworkFeature) {\n        const edgeId = closestNetworkFeature.getId()\n\n        const jsonData = JSON.stringify({\n            x: coords[0],\n            y: coords[1],\n            edge_id: edgeId\n        })\n\n        callService('solve_downstream', jsonData, serviceCallback)\n        // callService('solve_upstream', jsonData, serviceCallback)\n    }\n}\n\nexport function createRiverSolver (map, networkLayer) {\n    map.addLayer(resultsLayer)\n\n    const draw = new Draw({\n        source: resultsLayer.getSource(),\n        type: 'Point',\n        condition: function (evt) {\n            if (primaryAction(evt) === true) {\n                return isFeatureSnapped(map, evt.coordinate, networkLayer)\n            } else {\n                return false\n            }\n        }\n    })\n\n    selectInteraction = new Select({\n        layers: [resultsLayer],\n        style: function (feature, resolution) {\n            return new Style({\n                stroke: new Stroke({\n                    color: '#00ffff',\n                    width: 2\n                })\n            })\n        }\n    })\n    selectInteraction.setActive(false)\n\n    map.addInteraction(selectInteraction)\n\n    resultsLayer.getSource().on('addfeature', function (evt) {\n        if (evt.feature.getGeometry().getType() === 'Point') {\n            getDownstream(networkLayer, resultsLayer, evt.feature)\n        }\n    })\n\n    return draw\n}\n","import { Map, View } from 'ol'\nimport TileLayer from 'ol/layer/Tile'\nimport { Snap } from 'ol/interaction.js'\nimport { transformExtent } from 'ol/proj'\nimport XYZ from 'ol/source/XYZ.js'\nimport { getCenter } from 'ol/extent'\n\nimport 'ol/ol.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport ContextMenu from 'ol-contextmenu'\nimport 'ol-contextmenu/ol-contextmenu.css'\n\nimport '../style.css'\n\nimport { createNetworkLayer, toggleLabels } from './networklayer.js'\nimport { createRiverSolver, clearRoutes } from './riversolver.js'\nimport { createTable } from './table.js'\n\nfunction init () {\n    const extent = [-10.460090, 52.139686, -9.069436, 52.562382]\n    const bbox = transformExtent(extent, 'EPSG:4326', 'EPSG:3857')\n\n    const geojsonFile = './data/rivers.json'\n\n    createTable()\n\n    const background = null\n    const networkLayer = createNetworkLayer(geojsonFile, background, '#6495ED')\n\n    const map = new Map({\n        target: 'map',\n        layers: [\n            new TileLayer({\n                source: new XYZ({\n                    url: 'http://stamen-tiles-a.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png'\n                }),\n                opacity: 0.7\n            }),\n            networkLayer\n        ],\n        view: new View({\n            center: getCenter(bbox),\n            extent: bbox, // constrains extent\n            zoom: 10\n        })\n    })\n\n    const contextmenuItems = [\n        {\n            text: 'Hide/Show Labels',\n            callback: toggleLabels\n        },\n        {\n            text: 'Clear Results',\n            callback: clearRoutes\n        },\n        '-'\n    ]\n\n    const contextmenu = new ContextMenu({\n        width: 170,\n        defaultItems: true, // defaultItems are (for now) Zoom In/Zoom Out\n        items: contextmenuItems\n    })\n    map.addControl(contextmenu)\n\n    const riverSolver = createRiverSolver(map, networkLayer)\n\n    map.addInteraction(riverSolver)\n    riverSolver.setActive(true)\n\n    const snap = new Snap({\n        source: networkLayer.getSource()\n    })\n\n    map.addInteraction(snap)\n}\n\ninit()\n"],"names":["selectInteraction","clearRoutes","resultsLayer","resultsStyle","feature","resolution","Style","Stroke","Circle","Fill","VectorLayer","VectorSource","isFeatureSnapped","map","coord","searchLayer","extent","boundingExtent","bufferDistance","buffer","serviceCallback","data","feats","GeoJSON","updateTable","getDownstream","networkLayer","coords","coordinate","closestNetworkFeature","edgeId","jsonData","callService","createRiverSolver","draw","Draw","evt","primaryAction","Select","init","bbox","transformExtent","geojsonFile","createTable","createNetworkLayer","Map","TileLayer","XYZ","View","getCenter","contextmenuItems","toggleLabels","contextmenu","ContextMenu","riverSolver","snap","Snap"],"mappings":"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"}