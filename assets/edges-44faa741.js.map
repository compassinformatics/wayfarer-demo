{"version":3,"file":"edges-44faa741.js","sources":["../../src/js/edgesolver.js","../../src/js/edges.js"],"sourcesContent":["import { buffer, boundingExtent } from 'ol/extent.js'\nimport { primaryAction } from 'ol/events/condition.js'\nimport { Draw } from 'ol/interaction.js'\nimport VectorLayer from 'ol/layer/Vector.js'\nimport VectorSource from 'ol/source/Vector.js'\nimport { Fill, Stroke, Style, Circle, Text } from 'ol/style.js'\nimport { getNetworkEdits } from './networkeditor.js'\nimport GeoJSON from 'ol/format/GeoJSON.js'\nimport { callService } from './utils.js'\n\nimport Toastify from 'toastify-js'\nimport 'toastify-js/src/toastify.css'\n\nlet orderedEdges = []\n\nexport function clearEdges () {\n    orderedEdges = []\n    // clear all previous features so only the last drawn feature remains\n    resultsLayer.getSource().clear()\n}\n\nfunction resultsStyle (feature, resolution) {\n    let text\n\n    if (feature.getGeometry().getType() === 'LineString') {\n        text = new Text({\n            text: feature.get('index').toString(),\n            font: '10px Open Sans',\n            fill: new Fill({ color: '#000' }),\n            stroke: new Stroke({ color: '#fff', width: 3 }),\n            offsetX: 0,\n            offsetY: -12,\n            textAlign: 'center',\n            textBaseline: 'middle'\n        })\n    } else {\n        text = new Text({\n            text: feature.get('index').toString(),\n            font: '14px Open Sans',\n            // fill: new Fill({ color: '#000' }),\n            // stroke: new Stroke({ color: '#000', width: 3 }),\n            offsetX: 0,\n            offsetY: 0,\n            textAlign: 'center',\n            textBaseline: 'middle'\n        })\n    }\n\n    return new Style({\n\n        stroke: new Stroke({\n            color: 'yellow',\n            width: 2\n        }),\n\n        text,\n\n        image: new Circle({\n            radius: 12,\n            fill: new Fill({\n                color: 'yellow'\n            })\n            // stroke: new Stroke({\n            //    color: 'black',\n            //    width: 2\n            // })\n        })\n    })\n};\n\nconst resultsLayer = new VectorLayer({\n    source: new VectorSource(),\n    style: resultsStyle\n})\n\nfunction clearPreviousFeatures () {\n    // remove any previous edges from the results layer\n\n    resultsLayer.getSource().forEachFeature(function (feature) {\n        if (feature.getGeometry().getType() === 'LineString') {\n            // Remove the feature from the layer\n            resultsLayer.getSource().removeFeature(feature)\n        }\n    })\n}\n\n// function highlightRoute (networkLayer, resultsLayer, orderedEdgeIds) {\n//    clearPreviousFeatures()\n\n//    orderedEdgeIds.forEach(function (edgeId, index) {\n//        // when we handle split edges the keys no longer exist on the original layer\n//        // so we can't simply clone these features\n\n//        const feature = networkLayer.getSource().getFeatureById(edgeId)\n//        const clonedFeature = feature.clone()\n//        clonedFeature.set('index', index)\n//        resultsLayer.getSource().addFeature(clonedFeature)\n//    })\n// }\n\nfunction isFeatureSnapped (map, coord, searchLayer) {\n    let extent = boundingExtent([coord]) // still a single point\n    const bufferDistance = map.getView().getResolution() * 3 // use a 6 pixel tolerance for snapping\n    extent = buffer(extent, bufferDistance) // buffer the point\n\n    const feats = searchLayer.getSource().getFeaturesInExtent(extent)\n\n    if (feats.length > 0) {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunction serviceCallback (data) {\n    // load route from the GeoJSON\n\n    clearPreviousFeatures()\n\n    // load route from the GeoJSON\n    const geojsonFormat = new GeoJSON()\n    const feats = geojsonFormat.readFeatures(data)\n    resultsLayer.getSource().addFeatures(feats)\n\n    // highlightRoute(networkLayer, resultsLayer, data)dateTable(feats, selectInteraction, resultsLayer)\n}\n\nfunction drawEnd (evt, networkLayer, resultsLayer) {\n    const feature = evt.feature\n    const coordinate = feature.getGeometry().getCoordinates()\n    const closestNetworkFeature = networkLayer.getSource().getClosestFeatureToCoordinate(coordinate)\n\n    if (closestNetworkFeature) {\n        orderedEdges.push(closestNetworkFeature.getId())\n        feature.set('index', orderedEdges.length)\n    }\n\n    const jsonData = JSON.stringify({\n        path: orderedEdges,\n        edits: getNetworkEdits()\n    })\n\n    if (orderedEdges.length > 1) {\n        callService('solve_shortest_path_from_edges', jsonData, serviceCallback)\n    }\n}\n\nexport function createEdgeSolver (map, networkLayer) {\n    map.addLayer(resultsLayer)\n\n    const draw = new Draw({\n        source: resultsLayer.getSource(),\n        type: 'Point',\n        condition: function (evt) {\n            if (primaryAction(evt) === true) {\n                return isFeatureSnapped(map, evt.coordinate, networkLayer)\n            } else {\n                return false\n            }\n        }\n    })\n\n    draw.on('drawend', function (evt) {\n        drawEnd(evt, networkLayer, resultsLayer)\n    })\n\n    return draw\n}\n","import '../style.css'\nimport { Map, View } from 'ol'\nimport { Snap } from 'ol/interaction.js'\nimport { getCenter } from 'ol/extent'\n\nimport 'ol/ol.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport ContextMenu from 'ol-contextmenu'\nimport 'ol-contextmenu/ol-contextmenu.css'\n\nimport { createEdgeSolver, clearEdges } from './edgesolver.js'\nimport { createNetworkEditor, clearNetworkEdits } from './networkeditor.js'\nimport { createNetworkLayer, toggleLabels } from './networklayer.js'\n\nimport { createTable } from './table.js'\n\nfunction init () {\n    const geojsonFile = './data/dublin.json'\n    const bbox = [-700886.9046790214, 7045529.032412218, -695548.0308066505, 7048223.495319679]\n    const background = '#1a2b39'\n\n    const networkLayer = createNetworkLayer(geojsonFile, background)\n\n    createTable()\n\n    const map = new Map({\n        target: 'map',\n        layers: [networkLayer],\n        view: new View({\n            center: getCenter(bbox),\n            extent: bbox, // constrains extent\n            zoom: 16\n        })\n    })\n\n    const contextmenuItems = [\n        {\n            text: 'Hide/Show Labels',\n            callback: toggleLabels\n        },\n        '-',\n        {\n            text: 'Activate Edge Solver',\n            callback: function () {\n                disableTools()\n                edgeSolver.setActive(true)\n            }\n        },\n        {\n            text: 'Clear Edges',\n            callback: clearEdges\n        },\n        '-',\n        {\n            text: 'Activate Network Editor',\n            callback: function () {\n                disableTools()\n                networkEditor.setActive(true)\n            }\n        },\n        {\n            text: 'Clear Network Edits',\n            callback: clearNetworkEdits\n        },\n        '-'\n    ]\n\n    function disableTools () {\n        const tools = [edgeSolver, networkEditor]\n        tools.forEach(function (tool) {\n            tool.setActive(false)\n        })\n    }\n\n    const contextmenu = new ContextMenu({\n        width: 170,\n        defaultItems: true, // defaultItems are (for now) Zoom In/Zoom Out\n        items: contextmenuItems\n    })\n    map.addControl(contextmenu)\n\n    const networkEditor = createNetworkEditor(map, networkLayer)\n    const edgeSolver = createEdgeSolver(map, networkLayer)\n\n    map.addInteraction(edgeSolver)\n    map.addInteraction(networkEditor)\n\n    disableTools()\n    edgeSolver.setActive(true)\n\n    const snap = new Snap({\n        source: networkLayer.getSource()\n    })\n\n    // The snap interaction must be added after the Modify and Draw interactions\n    // in order for its map browser event handlers to be fired first. Its handlers\n    // are responsible of doing the snapping.\n    map.addInteraction(snap)\n}\n\ninit()\n"],"names":["orderedEdges","clearEdges","resultsLayer","resultsStyle","feature","resolution","text","Text","Fill","Stroke","Style","Circle","VectorLayer","VectorSource","clearPreviousFeatures","isFeatureSnapped","map","coord","searchLayer","extent","boundingExtent","bufferDistance","buffer","serviceCallback","data","feats","GeoJSON","drawEnd","evt","networkLayer","coordinate","closestNetworkFeature","jsonData","getNetworkEdits","callService","createEdgeSolver","draw","Draw","primaryAction","init","geojsonFile","bbox","createNetworkLayer","createTable","Map","View","getCenter","contextmenuItems","toggleLabels","disableTools","edgeSolver","networkEditor","clearNetworkEdits","tool","contextmenu","ContextMenu","createNetworkEditor","snap","Snap"],"mappings":"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"}